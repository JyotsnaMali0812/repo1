import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;

public class ConsumerEx
{
    public static void main(String args[])
    {
        List<Integer> l1 = new ArrayList<>(Arrays.asList(11,22,33)); // list created
        System.out.println("List with original data "+l1);
        
        //Consumer FI
        Consumer<List<Integer>> product = list -> {
            for(int i=0;i< list.size();i++)
            {
                list.set(i,list.get(i)*2);
            }
        };
        // Calling the accept method of the Consumer FI
      product.accept(l1);
      System.out.println("List after applying Consumer accept method "+l1);     
      
    }
}
 
 
Supplier
The supplier interface returns the supplier of results.
It has one method get().
It does not take any argument but returns result.
Interface Supplier<T>
{
T get();
}
Example:
package functionalinterface;

import java.util.function.Supplier;

public class SupplierEx
{
    public static void main(String args[])
    {
        Supplier<Double> result = Math::random;
        System.out.println(result.get());
    }
}


Predicate
Itâ€™s a Functional Interface which takes one argument and returns a Boolean value.
It has one method test(T t).
 
Interface Predicate<T>
{
boolean test(T t);
}
 
package functionalinterface;

import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class PredicateEx {
    public static void main(String args[])
    {
List<String> li = Arrays.asList("Ram", "Shyam","Sita","Sam");
// predicate to filter the strings starts with 'S'.
Predicate<String> withS = l1 -> l1.startsWith("S");
List<String>  names = li.stream().filter(withS).collect(Collectors.toList());
System.out.println("Names starts with 'S'");
System.out.println(names);
// predicate to filter the strings with length greater than 3
Predicate<String> length = l2 -> l2.length()>2;
List<String> length3 = li.stream().filter(length).collect(Collectors.toList());
System.out.println("Names greater than length 2");
System.out.println(length3);
}
}

package functionalinterface;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;

public class FunctionEx
{
    public static void main(String args[])
    {
        List<String> li = Arrays.asList("Hi", "Hello"," How ","Oh ");
        System.out.println("Greetings");
        System.out.println(li);
        Function<String,String> adding = s -> s+" !";
        List<String> greetings = li.stream().map(adding).collect(Collectors.toList());
        System.out.println("Greetings with Exclamation");
        System.out.println(greetings);


    }


}

