class Node {
    int key;
    Node left, right;

    public Node(int key) {
        this.key = key;
        this.left = null;
        this.right = null;
    }
}

public class BinarySearchTree {
    Node root;

    public BinarySearchTree() {
        this.root = null;
    }

    // Insert key
    public void insert(int key) {
        root = inserting(root, key);
    }

    Node inserting(Node root, int key) {
        if (root == null) {
            root = new Node(key);
            return root;
        }
        if (key < root.key)
            root.left = inserting(root.left, key);
        else if (key > root.key)
            root.right = inserting(root.right, key);
        return root;
    }

    // Search key in tree
    public boolean search(Node root, int key) {
        if (root == null)
            return false;
        if (key == root.key)
            return true;
        return key < root.key ? search(root.left, key) : search(root.right, key);
    }

    // Delete method
    public Node delete(Node root, int key) {
        if (root == null)
            return root;
        if (key < root.key)
            root.left = delete(root.left, key);
        else if (key > root.key)
            root.right = delete(root.right, key);
        else {
            if (root.left == null)
                return root.right;
            else if (root.right == null)
                return root.left;

            root.key = minValue(root.right);
            root.right = delete(root.right, root.key);
        }
        return root;
    }

    int minValue(Node root) {
        int minValue = root.key;
        while (root.left != null) {
            minValue = root.left.key;
            root = root.left;
        }
        return minValue;
    }

    // Inorder traversal
    public void inorder(Node root) {
        if (root != null) {
            inorder(root.left);
            System.out.print(root.key + " ");
            inorder(root.right);
        }
    }

    // Preorder traversal
    public void preorder(Node root) {
        if (root != null) {
            System.out.print(root.key + " ");
            preorder(root.left);
            preorder(root.right);
        }
    }

    public static void main(String[] args) {
        BinarySearchTree bst = new BinarySearchTree();
        bst.insert(60);
        bst.insert(40);
        bst.insert(30);
        bst.insert(50);
        bst.insert(80);
        bst.insert(70);
        bst.insert(100);

        System.out.println("Inorder traversal:");
        bst.inorder(bst.root);
        System.out.println();

        System.out.println("Preorder traversal:");
        bst.preorder(bst.root);
        System.out.println();

        System.out.println("Root value:");
        System.out.println(bst.root.key);

        System.out.println("Deleting 30...");
        bst.delete(bst.root, 30);
        System.out.println("Inorder traversal after deletion:");
        bst.inorder(bst.root);
        System.out.println();

        System.out.println("Deleting 70...");
        bst.delete(bst.root, 70);
        System.out.println("Inorder traversal after deletion:");
        bst.inorder(bst.root);
        System.out.println();
    }
}
