DAY 3 Core Java

Task 1: Stack Sorting In-Place
You must write a function to sort a stack such that the smallest items are on the top. You can use an additional temporary stack, but you may not copy the elements into any other data structure such as an array. The stack supports the following operations: push, pop, peek, and isEmpty.
Ans:
step-by-step process:

1.Initialize a temporary stack.
2.While the original stack is not empty:
    -Pop an element from the original stack.
    -  While the temporary stack is not   empty and the top element of the temporary stack is greater than the popped element, pop the elements from the temporary stack back to the original stack.
   -Push the popped element to the temporary stack.
3.Transfer the elements from the temporary stack back to the original stack.
Here's the Java implementation:


import java.util.Stack;

public class StackSorter {

    public static void sortStack(Stack<Integer> stack) {
        Stack<Integer> tempStack = new Stack<>();

        while (!stack.isEmpty()) {
            // Pop the top element from the original stack
            int current = stack.pop();

            // Transfer elements from tempStack to stack until the correct position for current is found
            while (!tempStack.isEmpty() && tempStack.peek() > current) {
                stack.push(tempStack.pop());
            }

            // Push the current element to the tempStack
            tempStack.push(current);
        }

        // Transfer the sorted elements back to the original stack
        while (!tempStack.isEmpty()) {
            stack.push(tempStack.pop());
        }
    }

    public static void printStack(Stack<Integer> stack) {
        for (Integer element : stack) {
            System.out.print(element + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(34);
        stack.push(3);
        stack.push(31);
        stack.push(98);
        stack.push(92);
        stack.push(23);

        System.out.println("Original stack:");
        printStack(stack);

        sortStack(stack);

        System.out.println("Sorted stack:");
        printStack(stack);
    }
}

Explanation:

sortStack Method:

Uses a temporary stack to sort the original stack.
Pops elements from the original stack and places them in the correct position in the temporary stack.
Maintains the order of the temporary stack in such a way that the smallest elements are at the top.

printStack Method:

A helper method to print the elements of the stack.

main Method:

Demonstrates the usage of the sortStack method with an example stack.
Prints the original and sorted stacks to the console.

Key Points:

1.The temporary stack is used to maintain a sorted order of elements.
2.Elements are transferred between the original stack and the temporary stack to find the correct position for each element.
3.The final result is a sorted stack with the smallest elements on the top.


Task 2: Removing Duplicates from a Sorted Linked List
A sorted linked list has been constructed with repeated elements. Describe an algorithm to remove all duplicates from the linked list efficiently.

Ans:
step-by-step algorithm:

1.Initialize a pointer to the head of the linked list.
2.Traverse the linked list using this pointer.
3.For each node, check if the next node has the same value as the current node.
4.If it does, bypass the next node by setting the current node's next pointer to the next node's next pointer.
5.If it doesn't, move the pointer to the next node.
6.Continue this process until the end of the list is reached.

 Java implementation of this algorithm:


class Node {
    int key;
    Node next;

    public Node(int key) {
        this.key = key;
        this.next = null;
    }
}

public class RemoveDuplicatesFromSortedLinkedList {

    // Function to remove duplicates from a sorted linked list
    public static void removeDuplicates(Node head) {
        if (head == null) {
            return;
        }

        Node current = head;

        while (current != null && current.next != null) {
            if (current.key == current.next.key) {
                // Bypass the duplicate node
                current.next = current.next.next;
            } else {
                // Move to the next node
                current = current.next;
            }
        }
    }

    // Helper function to print the linked list
    public static void printList(Node head) {
        Node current = head;
        while (current != null) {
            System.out.print(current.key + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        // Creating a sorted linked list with duplicates
        Node head = new Node(1);
        head.next = new Node(1);
        head.next.next = new Node(2);
        head.next.next.next = new Node(3);
        head.next.next.next.next = new Node(3);
        head.next.next.next.next.next = new Node(4);
        head.next.next.next.next.next.next = new Node(4);
        head.next.next.next.next.next.next.next = new Node(5);

        System.out.println("Original list:");
        printList(head);

        removeDuplicates(head);

        System.out.println("List after removing duplicates:");
        printList(head);
    }
}
Explanation:

Node Class:

Defines the structure of a node in the linked list.

removeDuplicates Method:

Takes the head of the linked list as an argument.
Traverses the linked list, removing any consecutive duplicate nodes by adjusting the next pointers.

printList Method:

A helper method to print the elements of the linked list.

main Method:

Creates a sorted linked list with duplicate elements.
Prints the original list.
Calls the removeDuplicates method to remove duplicates.
Prints the list after duplicates have been removed.








