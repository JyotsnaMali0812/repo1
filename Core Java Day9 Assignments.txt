Day 9
Task 1: Dijkstra's Shortest Path Finder
Code Dijkstra's algorithm to find the shortest path from a start node to every other node in a weighted graph with positive weights.
Ans:
import heapq

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def add_edge(self, u, v, weight):
        self.graph[u].append((v, weight))
        self.graph[v].append((u, weight))  # If the graph is undirected

    def dijkstra(self, start):
        # Initialize distances with infinity and set the start node distance to 0
        distances = {node: float('inf') for node in self.graph}
        distances[start] = 0
        priority_queue = [(0, start)]  # (distance, node)

        while priority_queue:
            current_distance, current_node = heapq.heappop(priority_queue)

            # If the popped node distance is greater than the recorded distance, skip it
            if current_distance > distances[current_node]:
                continue

            # Check neighbors
            for neighbor, weight in self.graph[current_node]:
                distance = current_distance + weight

                # If found a shorter path, update the distance and push it to the priority queue
                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    heapq.heappush(priority_queue, (distance, neighbor))

        return distances

# Example usage:
g = Graph()
g.add_edge(0, 1, 4)
g.add_edge(0, 2, 1)
g.add_edge(2, 1, 2)
g.add_edge(1, 3, 1)
g.add_edge(2, 3, 5)

print("Shortest distances from node 0:")
distances = g.dijkstra(0)
for node, distance in distances.items():
    print(f"Node {node} : Distance {distance}")


Task 2: Kruskal's Algorithm for MST
Implement Kruskal's algorithm to find the minimum spanning tree of a given connected, undirected graph with non-negative edge weights
Ans:

class Graph:
    def __init__(self, vertices):
        self.V = vertices  # Number of vertices
        self.graph = []    # List to store the graph as edges

    def add_edge(self, u, v, weight):
        # Add an edge to the graph (u, v, weight)
        self.graph.append((weight, u, v))

    # Find set of an element i (uses path compression technique)
    def find(self, parent, i):
        if parent[i] == i:
            return i
        # Path compression heuristic
        parent[i] = self.find(parent, parent[i])
        return parent[i]

    # A function to do union of two sets of x and y (uses union by rank)
    def union(self, parent, rank, x, y):
        root_x = self.find(parent, x)
        root_y = self.find(parent, y)

        # Union by rank heuristic
        if root_x != root_y:
            if rank[root_x] < rank[root_y]:
                parent[root_x] = root_y
            elif rank[root_x] > rank[root_y]:
                parent[root_y] = root_x
            else:
                parent[root_y] = root_x
                rank[root_x] += 1

    # Kruskal's algorithm to construct MST
    def kruskal_mst(self):
        result = []  # This will store the resultant MST

        # Step 1: Sort all the edges in non-decreasing order of their weight
        self.graph.sort()

        parent = list(range(self.V))  # Initialize parent list
        rank = [0] * self.V  # Initialize rank list

        # Number of edges to be taken is equal to V-1
        e = 0  # Initial count of edges in MST
        i = 0  # Initial index of sorted edges

        while e < self.V - 1:
            # Step 2: Pick the smallest edge and increment the index
            weight, u, v = self.graph[i]
            i = i + 1

            x = self.find(parent, u)
            y = self.find(parent, v)

            # If including this edge doesn't cause a cycle, include it in the result
            if x != y:
                e = e + 1
                result.append((u, v, weight))
                self.union(parent, rank, x, y)

        # Print the contents of result
        print("Following are the edges in the constructed MST with their weights:")
        for u, v, weight in result:
            print(f"{u} -- {v} == {weight}")

# Example usage:
g = Graph(4)
g.add_edge(0, 1, 10)
g.add_edge(0, 2, 6)
g.add_edge(0, 3, 5)
g.add_edge(1, 3, 15)
g.add_edge(2, 3, 4)

print("Minimum Spanning Tree:")
g.kruskal_mst()

