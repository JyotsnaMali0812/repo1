Core Java Assignment Day 5  
Task 1-> Merging Two Sorted Linked Lists You are provided with the heads of two sorted linked lists. The lists are sorted in ascending order. Create a merged linked list in ascending order from the two input lists without using any extra space (i.e., do not create any new nodes).

Ans: Implementation
class ListNode {
    int val;
    ListNode next;
    ListNode(int val) {
        this.val = val;
        this.next = null;
    }
}

public class MergeSortedLists {
    public static ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode(0); // Dummy node to start the merged list
        ListNode current = dummy; // Pointer to build the new list

        while (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {
                current.next = list1;
                list1 = list1.next;
            } else {
                current.next = list2;
                list2 = list2.next;
            }
            current = current.next;
        }

        // Attach the remaining nodes
        if (list1 != null) {
            current.next = list1;
        } else {
            current.next = list2;
        }

        return dummy.next; // The head of the merged list is next of the dummy node
    }

    // Utility method to print the list
    public static void printList(ListNode head) {
        ListNode temp = head;
        while (temp != null) {
            System.out.print(temp.val + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        // Creating the first sorted linked list: 1 -> 3 -> 5
        ListNode list1 = new ListNode(1);
        list1.next = new ListNode(3);
        list1.next.next = new ListNode(5);

        // Creating the second sorted linked list: 2 -> 4 -> 6
        ListNode list2 = new ListNode(2);
        list2.next = new ListNode(4);
        list2.next.next = new ListNode(6);

        // Merging the lists
        ListNode mergedList = mergeTwoLists(list1, list2);

        // Printing the merged list
        printList(mergedList);
    }
}


Day 6
Task: Circular Queue Binary Search
Consider a circular queue (implemented using a fixed-size array) where the elements are sorted but have been rotated at an unknown index. Describe an approach to perform a binary search for a given element within this circular queue.
Ans:
To perform a binary search on a circular queue where elements are sorted but rotated at an unknown index, you can follow these steps:

Identify the Pivot: The first step is to find the index of the smallest element (pivot), which indicates where the rotation occurred.
Perform Modified Binary Search: Use the pivot to decide which half of the array to perform the binary search on.
Here's a detailed approach to achieve this:

Step 1: Find the Pivot
The pivot is the index of the smallest element in the circular queue. You can find the pivot using a modified binary search:

public static int findPivot(int[] arr) {
    int low = 0, high = arr.length - 1;
    while (low < high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] > arr[high]) {
            // Pivot must be in the right half
            low = mid + 1;
        } else {
            // Pivot must be in the left half
            high = mid;
        }
    }
    return low; // 'low' should be the index of the smallest element
}
Step 2: Perform Binary Search
Once the pivot is found, use it to decide which half of the array to search in:

public static int binarySearchInCircularQueue(int[] arr, int target) {
    int pivot = findPivot(arr);
    int low = 0, high = arr.length - 1;

    // Determine which part to search in
    if (target >= arr[pivot] && target <= arr[high]) {
        low = pivot;
    } else {
        high = pivot - 1;
    }

    // Standard binary search
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] == target) {
            return mid;
        } else if (arr[mid] < target) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    return -1; // Target not found
}
Example
Here's a complete example:

public class CircularQueueBinarySearch {
    public static int findPivot(int[] arr) {
        int low = 0, high = arr.length - 1;
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] > arr[high]) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static int binarySearchInCircularQueue(int[] arr, int target) {
        int pivot = findPivot(arr);
        int low = 0, high = arr.length - 1;

        if (target >= arr[pivot] && target <= arr[high]) {
            low = pivot;
        } else {
            high = pivot - 1;
        }

        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] == target) {
                return mid;
            } else if (arr[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return -1; // Target not found
    }

    public static void main(String[] args) {
        int[] arr = {10, 15, 20, 0, 5};
        int target = 15;

        int result = binarySearchInCircularQueue(arr, target);
        if (result != -1) {
            System.out.println("Element found at index: " + result);
        } else {
            System.out.println("Element not found");
        }
    }
}

Explanation-

findPivot Method:

Uses binary search to find the index of the smallest element, which is the pivot point.
If the middle element is greater than the last element, the pivot must be in the right half.
Otherwise, the pivot is in the left half.

binarySearchInCircularQueue Method:

Determines which part of the array to search by comparing the target with the pivot element and the last element.
Performs a standard binary search in the identified part.

main Method:

Demonstrates the use of binarySearchInCircularQueue by searching for a target element in a rotated sorted array.

Task 1: Balanced Binary Tree Check
Write a function to check if a given binary tree is balanced. A balanced tree is one where the height of two subtrees of any node never differs by more than one.

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

public class BalancedBinaryTree {
    // Helper function that checks the balance of the tree and returns the height
    private static int checkHeight(TreeNode node) {
        if (node == null) {
            return 0;
        }

        int leftHeight = checkHeight(node.left);
        if (leftHeight == -1) return -1; // Left subtree is not balanced

        int rightHeight = checkHeight(node.right);
        if (rightHeight == -1) return -1; // Right subtree is not balanced

        if (Math.abs(leftHeight - rightHeight) > 1) {
            return -1; // Current node is not balanced
        }

        return Math.max(leftHeight, rightHeight) + 1; // Return height of the subtree
    }

    // Main function to check if the tree is balanced
    public static boolean isBalanced(TreeNode root) {
        return checkHeight(root) != -1;
    }

    public static void main(String[] args) {
        // Example usage:
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);
        root.left.left.left = new TreeNode(6);

        System.out.println(isBalanced(root)); // Output: false, because the tree is not balanced
    }
}

Task 2: Trie for Prefix Checking
Implement a trie data structure in C# that supports insertion of strings and provides a method to check if a given string is a prefix of any word in the trie.
Ans:
import java.util.HashMap;
import java.util.Map;

public class Trie {

    private class TrieNode {
        Map<Character, TrieNode> children = new HashMap<>();
        boolean isEndOfWord;

        public TrieNode() {
            isEndOfWord = false;
        }
    }

    private final TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    // Method to insert a word into the trie
    public void insert(String word) {
        TrieNode current = root;
        for (char ch : word.toCharArray()) {
            current = current.children.computeIfAbsent(ch, c -> new TrieNode());
        }
        current.isEndOfWord = true;
    }

    // Method to check if a given string is a prefix of any word in the trie
    public boolean isPrefix(String prefix) {
        TrieNode current = root;
        for (char ch : prefix.toCharArray()) {
            TrieNode node = current.children.get(ch);
            if (node == null) {
                return false;
            }
            current = node;
        }
        return true;
    }

    // Method to check if a word exists in the trie
    public boolean search(String word) {
        TrieNode current = root;
        for (char ch : word.toCharArray()) {
            TrieNode node = current.children.get(ch);
            if (node == null) {
                return false;
            }
            current = node;
        }
        return current.isEndOfWord;
    }

    public static void main(String[] args) {
        Trie trie = new Trie();
        trie.insert("apple");
        trie.insert("app");
        trie.insert("bat");
        trie.insert("ball");

        System.out.println(trie.isPrefix("app")); // true
        System.out.println(trie.isPrefix("appl")); // true
        System.out.println(trie.isPrefix("bat")); // true
        System.out.println(trie.isPrefix("balloon")); // false
        System.out.println(trie.isPrefix("cat")); // false
    }
}

Task 3: Implementing Heap Operations
Code a min-heap in C# with methods for insertion, deletion, and fetching the minimum element. Ensure that the heap property is maintained after each operation.
Ans:
import java.util.ArrayList;
import java.util.List;

public class MinHeap {

    private List<Integer> heap;

    public MinHeap() {
        heap = new ArrayList<>();
    }

    // Method to get the parent index
    private int parent(int index) {
        return (index - 1) / 2;
    }

    // Method to get the left child index
    private int leftChild(int index) {
        return 2 * index + 1;
    }

    // Method to get the right child index
    private int rightChild(int index) {
        return 2 * index + 2;
    }

    // Method to swap two elements in the heap
    private void swap(int index1, int index2) {
        int temp = heap.get(index1);
        heap.set(index1, heap.get(index2));
        heap.set(index2, temp);
    }

    // Method to maintain the heap property after insertion (heapify-up)
    private void heapifyUp(int index) {
        while (index > 0 && heap.get(parent(index)) > heap.get(index)) {
            swap(parent(index), index);
            index = parent(index);
        }
    }

    // Method to maintain the heap property after deletion (heapify-down)
    private void heapifyDown(int index) {
        int left = leftChild(index);
        int right = rightChild(index);
        int smallest = index;

        if (left < heap.size() && heap.get(left) < heap.get(smallest)) {
            smallest = left;
        }

        if (right < heap.size() && heap.get(right) < heap.get(smallest)) {
            smallest = right;
        }

        if (smallest != index) {
            swap(index, smallest);
            heapifyDown(smallest);
        }
    }

    // Method to insert an element into the heap
    public void insert(int element) {
        heap.add(element);
        heapifyUp(heap.size() - 1);
    }

    // Method to delete the minimum element from the heap
    public int deleteMin() {
        if (heap.isEmpty()) {
            throw new IllegalStateException("Heap is empty");
        }

        int minElement = heap.get(0);
        int lastElement = heap.remove(heap.size() - 1);

        if (!heap.isEmpty()) {
            heap.set(0, lastElement);
            heapifyDown(0);
        }

        return minElement;
    }

    // Method to get the minimum element from the heap
    public int getMin() {
        if (heap.isEmpty()) {
            throw new IllegalStateException("Heap is empty");
        }

        return heap.get(0);
    }

    // Main method to demonstrate the functionality of the MinHeap
    public static void main(String[] args) {
        MinHeap minHeap = new MinHeap();
        minHeap.insert(3);
        minHeap.insert(2);
        minHeap.insert(15);
        minHeap.insert(5);
        minHeap.insert(4);
        minHeap.insert(45);

        System.out.println("Minimum element: " + minHeap.getMin()); // Should print 2

        System.out.println("Deleted minimum element: " + minHeap.deleteMin()); // Should print 2
        System.out.println("Minimum element after deletion: " + minHeap.getMin()); // Should print 3

        minHeap.insert(1);
        System.out.println("Minimum element after inserting 1: " + minHeap.getMin()); // Should print 1
    }
}



