package graphs;
import java.util.Iterator;
import java.util.LinkedList;

public class BFS {
    private int numVertices; // number of vertices
    private LinkedList<Integer>[] adjacencyList; // adjacency list

    // Constructor
    public BFS(int numVertices) {
        this.numVertices = numVertices;
        adjacencyList = new LinkedList[numVertices];
        for (int i = 0; i < numVertices; i++) {
            adjacencyList[i] = new LinkedList<>();
        }
    }

    // Method to add an edge to the graph
    public void addEdge(int source, int destination) {
        adjacencyList[source].add(destination);
    }

    // Method to perform BFS traversal from a given source
    public void bfs(int startVertex) {
        boolean[] visited = new boolean[numVertices]; // array to mark visited vertices
        LinkedList<Integer> queue = new LinkedList<>(); // create a queue

        // mark the start vertex as visited and enqueue it
        visited[startVertex] = true;
        queue.add(startVertex);

        while (!queue.isEmpty()) {
            // dequeue a vertex from the queue and print it
            int currentVertex = queue.poll();
            System.out.print(currentVertex + " ");

            // get all adjacent vertices of the dequeued vertex
            // if an adjacent vertex has not been visited, mark it visited and enqueue it
            Iterator<Integer> iterator = adjacencyList[currentVertex].listIterator();
            while (iterator.hasNext()) {
                int adjacentVertex = iterator.next();
                if (!visited[adjacentVertex]) {
                    visited[adjacentVertex] = true;
                    queue.add(adjacentVertex);
                }
            }
        }
    }

    public static void main(String[] args) {
        BFS graph = new BFS(4);
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 2);
        graph.addEdge(2, 0);
        graph.addEdge(2, 3);
        graph.addEdge(3, 3);

        System.out.println("BFS traversal starting from vertex 2:");
        graph.bfs(2);
    }
}


stack sorting in-place
import java.util.Stack;

public class StackSorter {
    
    // Method to sort the stack
    public static void sortStack(Stack<Integer> stack) {
        Stack<Integer> tempStack = new Stack<>();
        
        while (!stack.isEmpty()) {
            // Pop an element from the original stack
            int currentElement = stack.pop();
            
            // While temporary stack is not empty and top of tempStack is greater than currentElement
            while (!tempStack.isEmpty() && tempStack.peek() > currentElement) {
                stack.push(tempStack.pop());
            }
            
            // Push the currentElement into tempStack
            tempStack.push(currentElement);
        }
        
        // Transfer sorted elements back to the original stack
        while (!tempStack.isEmpty()) {
            stack.push(tempStack.pop());
        }
    }
    
    // Main method to test the sortStack method
    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(34);
        stack.push(3);
        stack.push(31);
        stack.push(98);
        stack.push(92);
        stack.push(23);
        
        System.out.println("Original Stack: " + stack);
        
        sortStack(stack);
        
        System.out.println("Sorted Stack: " + stack);
    }
}
