
package dfs;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Stack;
public class DFS
{
    private int V;
    private LinkedList<Integer> l1[];
    public DFS(int v) {
        this.V = v;
        l1 = new LinkedList[v];
        for (int i = 0; i < v; i++) {
            l1[i] = new LinkedList<>();
        }
    }
        public void addEdge(int v,int w)
        {
            l1[v].add(w);
        }

        public void dfs(int s)
        {
            boolean visited[] = new boolean[V];
            Stack<Integer> stack = new Stack();
            stack.push(s);
            while(!stack.isEmpty())
            {
                int c = stack.pop();
                if(!visited[c])
                {
                    System.out.println("current node "+c);
                    visited[c] = true;
                }
                for(int adj: l1[c])
                {
                    if(!visited[adj])
                        stack.push(adj);
                }
            }
        }
        public static void main(String args[])
        {
            DFS obj = new DFS(6);
            obj.addEdge(0,1);
            obj.addEdge(0,2);
            obj.addEdge(1,2);
            obj.addEdge(2,0);
            obj.addEdge(2,3);
            obj.addEdge(3,3);
            obj.dfs(2);
        }
    }
 