import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class ThreadPoolExample {

    public static void main(String[] args) {
        // Step 1: Create a fixed-size thread pool with 4 threads
        ExecutorService executorService = Executors.newFixedThreadPool(4);

        // Step 2: Define the tasks
        List<Callable<String>> tasks = new ArrayList<>();
        tasks.add(() -> performComplexCalculation(1));
        tasks.add(() -> performComplexCalculation(2));
        tasks.add(() -> performComplexCalculation(3));
        tasks.add(() -> performComplexCalculation(4));

        // Step 3: Submit tasks and observe execution
        try {
            List<Future<String>> results = executorService.invokeAll(tasks);

            for (Future<String> result : results) {
                // Print result from each task
                System.out.println(result.get());
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Step 4: Shutdown the thread pool
            executorService.shutdown();
        }
    }

    // Example complex calculation
    private static String performComplexCalculation(int taskId) throws InterruptedException {
        // Simulate complex calculation or I/O operation
        Thread.sleep(2000); // Simulate delay
        return "Task " + taskId + " completed";
    }
}
