//Task-3-14 import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class ReflectionExample {

    public static void main(String[] args) {
        try {
            // Load the class at runtime
            Class<?> clazz = Class.forName("SampleClass");

            // Inspect the class's methods
            System.out.println("Methods:");
            Method[] methods = clazz.getDeclaredMethods();
            for (Method method : methods) {
                System.out.println(method);
            }

            // Inspect the class's fields
            System.out.println("\nFields:");
            Field[] fields = clazz.getDeclaredFields();
            for (Field field : fields) {
                System.out.println(field);
            }

            // Inspect the class's constructors
            System.out.println("\nConstructors:");
            Constructor<?>[] constructors = clazz.getDeclaredConstructors();
            for (Constructor<?> constructor : constructors) {
                System.out.println(constructor);
            }

            // Modify the access level of a private field
            Field privateField = clazz.getDeclaredField("privateField");
            privateField.setAccessible(true);

            // Create an instance of the class
            Constructor<?> constructor = clazz.getConstructor();
            Object instance = constructor.newInstance();

            // Set the value of the private field
            privateField.set(instance, "Modified Value");

            // Get the value of the private field
            String fieldValue = (String) privateField.get(instance);
            System.out.println("\nPrivate field value after modification: " + fieldValue);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

// Sample class to be inspected
class SampleClass {
    private String privateField = "Initial Value";
    public int publicField;

    public SampleClass() {
    }

    public SampleClass(int publicField) {
        this.publicField = publicField;
    }

    public void publicMethod() {
        System.out.println("Public method called");
    }

    private void privateMethod() {
        System.out.println("Private method called");
    }
}
