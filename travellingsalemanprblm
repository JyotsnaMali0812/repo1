import java.util.Arrays;

public class TravelingSalesman {

    public static int FindMinCost(int[][] graph) {
        int n = graph.length;
        int[][] dp = new int[n][(1 << n)]; // dp[i][mask] represents the minimum cost to visit the set of cities denoted by mask ending at city i.

        // Initialize the dp array with infinity values
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }

        // Start the tour from the first city
        dp[0][1] = 0; // Starting at city 0 with only city 0 visited.

        // Iterate over all subsets of cities
        for (int mask = 1; mask < (1 << n); mask++) {
            for (int i = 0; i < n; i++) {
                if ((mask & (1 << i)) != 0) { // Check if city i is in the subset
                    for (int j = 0; j < n; j++) {
                        if ((mask & (1 << j)) != 0 && i != j) { // Check if city j is also in the subset and not equal to city i
                            dp[i][mask] = Math.min(dp[i][mask], dp[j][mask ^ (1 << i)] + graph[j][i]);
                        }
                    }
                }
            }
        }

        // Calculate the minimum cost to return to the starting city
        int minCost = Integer.MAX_VALUE;
        for (int i = 1; i < n; i++) {
            minCost = Math.min(minCost, dp[i][(1 << n) - 1] + graph[i][0]);
        }

        return minCost;
    }

    public static void main(String[] args) {
        int[][] graph = {
            {0, 10, 15, 20},
            {10, 0, 35, 25},
            {15, 35, 0, 30},
            {20, 25, 30, 0}
        };

        int minCost = FindMinCost(graph);
        System.out.println("The minimum cost to visit all cities and return to the starting city is: " + minCost);
    }
}
